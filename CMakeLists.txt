CMAKE_MINIMUM_REQUIRED(VERSION 3.0.2)

PROJECT(PyFSA CXX C)


find_package(PythonLibs REQUIRED)
  
if(${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
MESSAGE(WARNING "YOUR BINARIES OR THE GENERATED PYD/SO FILE WILL BE IN A FOLDER CALLED DEBUG IN THE DIRECTORY YOU RAN THE CMAKE COMMAND IN")
file(GLOB_RECURSE PYTHON_LIBRARIES1 "C:/Users/*/AppData/Local/Programs/Python/Python*/libs/*.lib")
endif(${CMAKE_SYSTEM_NAME} STREQUAL "Windows")

string(COMPARE EQUAL "${PYTHON_LIBRARIES1}" "" result)
if(${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
if(result)
  message(STATUS "TRYING TO FIND PYTHON SOMEWHERE ELSE")
  file(GLOB_RECURSE PYTHON_LIBRARIES1 "C:/Python*/libs/*.lib")
  string(COMPARE EQUAL "${PYTHON_LIBRARIES1}" "" result2)
  if(result2)
  message(FATAL ERROR "PYTHON LIBRARY AND NUMPY NOT FOUND IN DEFAULT LOCATIONS, PLEASE INSTALL IT AND ENSURE IT IS IN C:/Pythonxx OR C:/Users/<your username without anglebrackets>/AppData/Programs/...")
  endif(result2)
else()
  message(STATUS "PYTHON LIBRARY LINKING FROM: ")
  message(STATUS ${PYTHON_LIBRARIES1})
endif(result)
elseif(${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
	file(GLOB_RECURSE PYTHON_LIBRARIES1 "/usr/local/lib/python*/*/numpy*/*/arrayobject.h")
	if(NOT "${PYTHON_INCLUDE_DIR}" STREQUAL "")
	string(FIND "${PYTHON_INCLUDE_DIR}" "python" PYTHON_STRING_INDEX)
	string(SUBSTRING "${PYTHON_INCLUDE_DIR}" ${PYTHON_STRING_INDEX} 9 PYTHON_VERS)
	if(NOT "${PYTHON_VERS}" STREQUAL "")
	MESSAGE(STATUS ${PYTHON_VERS})
	string(CONCAT POSSIBILITY1 "/usr/local/lib/" ${PYTHON_VERS})
	string(CONCAT POSSIBILITY2 "/usr/lib/" ${PYTHON_VERS})
	file(GLOB_RECURSE PYTHON_VERS_NUMPY_INCLUDE "${POSSIBILITY1}/*/*/core/*/arrayobject.h")
	file(GLOB_RECURSE PYTHON_VERS_NUMPY_INCLUDE2 "${POSSIBILITY2}/*/*/core/*/arrayobject.h")
	string(FIND "${PYTHON_VERS_NUMPY_INCLUDE}" "/arrayobject.h" PYTHON_VERS_NUMPY_INDEX)
	string(FIND "${PYTHON_VERS_NUMPY_INCLUDE2}" "/arrayobject.h" PYTHON_VERS_NUMPY_INDEX2)
	string(SUBSTRING "${PYTHON_VERS_NUMPY_INCLUDE}" 0 ${PYTHON_VERS_NUMPY_INDEX} PYTHON_VERS_NUMPY_INCLUDE_DIR)
	string(SUBSTRING "${PYTHON_VERS_NUMPY_INCLUDE2}" 0 ${PYTHON_VERS_NUMPY_INDEX2} PYTHON_VERS_NUMPY_INCLUDE_DIR2)
	MESSAGE(STATUS ${PYTHON_VERS_NUMPY_INCLUDE})
	MESSAGE(STATUS ${PYTHON_VERS_NUMPY_INCLUDE2})
	MESSAGE(STATUS ${POSSIBILITY1})
	MESSAGE(STATUS ${POSSIBILITY2})
	MESSAGE(STATUS ${PYTHON_VERS_NUMPY_INCLUDE_DIR})
	MESSAGE(STATUS ${PYTHON_VERS_NUMPY_INCLUDE_DIR2})
	endif(NOT "${PYTHON_VERS}" STREQUAL "")
	endif(NOT "${PYTHON_INCLUDE_DIR}" STREQUAL "")
endif(${CMAKE_SYSTEM_NAME} STREQUAL "Windows")

message(STATUS ${PYTHON_LIBRARIES1})

if(NOT "${PYTHON_LIBRARIES1}" STREQUAL "")
	string(FIND "${PYTHON_LIBRARIES1}" "/arrayobject.h" INDEX)
	MESSAGE(STATUS ${OUTPUT})
	string(SUBSTRING "${PYTHON_LIBRARIES1}" 0 ${INDEX} PYTHON_LIBRARY1)
	MESSAGE(STATUS ${PYTHON_LIBRARIES1})
endif(NOT "${PYTHON_LIBRARIES1}" STREQUAL "")

string(FIND ${PYTHON_LIBRARIES} ".a" AINDEX)
string(FIND ${PYTHON_LIBRARIES} ".so" SOINDEX)
string(FIND ${PYTHON_LIBRARIES} ".lib" LIBINDEX)
string(FIND ${PYTHON_LIBRARIES} ".dll" DLLINDEX)

MESSAGE(STATUS "${AINDEX}")

IF(${AINDEX} GREATER 0)
	SET (LIB_TYPE STATIC)
ELSEIF(${SOINDEX} GREATER 0)
	SET (LIB_TYPE SHARED)
ELSEIF(${LIBINDEX} GREATER 0)
	SET (LIB_TYPE STATIC)
ELSEIF(${DLLINDEX} GREATER 0)
	SET (LIB_TYPE SHARED)
ENDIF(${AINDEX} GREATER 0)

IF(NOT "${PYTHON_VERS_NUMPY_INCLUDE_DIR}" STREQUAL "")
	SET(EXPLICIT_NP_DIR ${PYTHON_VERS_NUMPY_INCLUDE_DIR})
ELSE()
	SET(EXPLICIT_NP_DIR "")
ENDIF(NOT "${PYTHON_VERS_NUMPY_INCLUDE_DIR}" STREQUAL "")

IF(NOT "${PYTHON_VERS_NUMPY_INCLUDE_DIR2}" STREQUAL "")
	SET(EXPLICIT_NP_DIR2 ${PYTHON_VERS_NUMPY_INCLUDE_DIR2})
ELSE()
	SET(EXPLICIT_NP_DIR2 "")
ENDIF(NOT "${PYTHON_VERS_NUMPY_INCLUDE_DIR2}" STREQUAL "")

include_directories(
  ${EXPLICIT_NP_DIR}
  ${EXPLICIT_NP_DIR2}
  ${PYTHON_LIBRARY1}
  ${PYTHON_INCLUDE_DIR}
  ${PYTHON_INCLUDE_DIR}/../lib/site-packages/numpy/core/include/numpy 
  ${PYTHON_INCLUDE_DIR}/../Lib/site-packages/numpy/core/include/numpy
  ${PYTHON_INCLUDE_DIR}/include
  ./include
  )

######################################CHECKS FOR C++11 SUPPORT, IF SUPPORT IS NOT PRESENT THIS CODE WILL STOP FURTHER PROCESSING############################
include(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
if(COMPILER_SUPPORTS_CXX11)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -fPIC -O2 -s -DNDEBUG")
elseif(COMPILER_SUPPORTS_CXX0X)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x -O2 -fPIC -s -DNDEBUG")
else()
        message(FATAL ERROR "THE COMPILER ${CMAKE_CXX_COMPILER} HAS NO C++11 SUPPORT!!!!! PLEASE USE A NEWER COMPILER TO USE THIS PROJECT!! THANK YOU")
endif()
#############################################################################################################################################################
IF(MSVC)
ADD_DEFINITIONS(-DUSE_MATH_DEFINES -DUSE_SCS -DAB_USE_UNORDERED_MAP	-D_CRT_SECURE_NO_WARNINGS)
ENDIF(MSVC)

FILE(GLOB HEADER_FILES "include/*.h")
FILE(GLOB SOURCE_FILES "src/*.cpp")

##########################################CREATE SHARED LIBRARY CONSTRUCTED FROM OUR SOURCE CODE AND HEADER FILES#########################

ADD_LIBRARY(PyFSA ${LIB_TYPE}
	${HEADER_FILES}
	${SOURCE_FILES}
)

##########################################SET SUFFIX OF SHARED LIBRARY BASED ON PLATFORM GENERATING IT####################################
IF(${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
SET_TARGET_PROPERTIES(PyFSA PROPERTIES SUFFIX .pyd)
ELSEIF(LINUX)
SET_TARGET_PROPERTIES(PyFSA PROPERTIES SUFFIX .so)
ENDIF(${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
##########################################LINK PyFSA WITH PYTHON LIBRARY LIBRARY FILE#########################################
target_link_libraries(PyFSA ${PYTHON_LIBRARIES})
